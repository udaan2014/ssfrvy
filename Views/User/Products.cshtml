@model WebApplication1.Models.Product
@{
    ViewBag.Title = "Products";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@* *******************Datatable for Showing product Details********************* *@
<div class="container" id="productContainer">
    <h3>Product Details</h3>
    <br />
    <a href="#" data-toggle="modal" data-target="#addModal">Add New Product</a>
    <hr />
    <table class="table table-striped table-hover table-responsive " id="productTable">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(model => model.ProductID)</th>
                <th>@Html.DisplayNameFor(model => model.ProductName)</th>
                <th>@Html.DisplayNameFor(model => model.QuantityPerUnit)</th>
                <th>@Html.DisplayNameFor(model => model.UnitPrice)</th>
                <th>@Html.DisplayNameFor(model => model.UnitsInStock)</th>
                <th>@Html.DisplayNameFor(model => model.UnitsOnOrder)</th>
                <th>@Html.DisplayNameFor(model => model.ReorderLevel)</th>
                <th>@Html.DisplayNameFor(model => model.Discontinued)</th>
                <th>@Html.DisplayNameFor(model => model.Category.CategoryName)</th>
                <th>@Html.DisplayNameFor(model => model.Supplier.CompanyName)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var productItem in ViewBag.products)
            {
            <tr id="tr-@productItem.ProductID">
                <td>@productItem.ProductID</td>
                <td>@productItem.ProductName</td>
                <td>@productItem.QuantityPerUnit</td>
                <td>@productItem.UnitPrice</td>
                <td>@productItem.UnitsInStock</td>
                <td>@productItem.UnitsOnOrder</td>
                <td>@productItem.ReorderLevel</td>
                <td>@productItem.Discontinued</td>
                <td class="@productItem.Category.CategoryID">@productItem.Category.CategoryName</td>
                <td class="@productItem.Supplier.SupplierID">@productItem.Supplier.CompanyName</td>
                <td>
                    @*@{
                                var pID = int.Parse(@productItem.ProductID.ToString());
                                string id1 = "e" + pID;
                                string id2 = "d" + pID;
                        }*@
                    @*<button data-toggle="modal" data-target="#viewModal" class="view-button" id="v @productItem.ProductID"><span class="glyphicon glyphicon-eye-open"></span></button>*@
                    <button data-toggle="modal" data-target="#editModal" class="edit-button" id="e @productItem.ProductID"><span class="glyphicon glyphicon-edit"></span></button>
                    <button data-toggle="modal" data-target="#deleteModal" class="delete-button" id="d @productItem.ProductID"><span class="glyphicon glyphicon-trash"></span></button>
                    @*@using (Html.BeginForm("Products", "User", new { id = @id1 }))
                        {
                            <button id="dd" type="submit"><span class="glyphicon glyphicon-edit"></span></button>

                        }

                        @using (Html.BeginForm("Products", "User", new { id = @id2 }))
                        {
                            <button type="submit" ><span class="glyphicon glyphicon-trash"></span></button>
                        }*@
                </td>
            </tr>
            }
        </tbody>
    </table>

    @* **********Pagination for the Product Table***************
        <ul id="Paging" class="pagination"></ul>*@
</div>

@* ******************************Modal for Add New Product*************************************@
<div id="addModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add New Product</h4>
            </div>
            <div class="modal-body">
                @Html.AntiForgeryToken()
                <form class="form-horizontal" method="post" action="Products">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.SupplierID, "SupplierID", htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-9">
                            @Html.DropDownList("SupplierID", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.SupplierID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.CategoryID, "CategoryID", htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-9">
                            @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.QuantityPerUnit, htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.QuantityPerUnit, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.QuantityPerUnit, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.UnitsInStock, htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.UnitsInStock, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.UnitsInStock, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.UnitsOnOrder, htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.UnitsOnOrder, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.UnitsOnOrder, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.ReorderLevel, htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.ReorderLevel, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ReorderLevel, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Discontinued, htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-9">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.Discontinued)
                                @Html.ValidationMessageFor(model => model.Discontinued, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Add" name="add" class="btn btn-default" />
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>

    </div>
</div>

@* *********************************Modal for Deletion ***********************************************@
<div id="deleteModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Delete Product</h4>
            </div>

            <div class="modal-body">
                <p>Are you sure about this ?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="btnYes">Delete</button>
            </div>
        </div>

    </div>
</div>

@************************************Modal for Updation************************************************@
<div id="editModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Update Product</h4>
            </div>
            <div class="modal-body edit-modal-body ">

                @Html.AntiForgeryToken()
                <form class="form-horizontal" method="post" action="Products" id="updateForm">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.ProductID, htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.ProductID, new { htmlAttributes = new { @class = "form-control", @id = "id0", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.ProductID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control", @id = "id1" } })
                            @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.QuantityPerUnit, htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-7">
                            @Html.EditorFor(model => model.QuantityPerUnit, new { htmlAttributes = new { @class = "form-control", @id = "id2" } })
                            @Html.ValidationMessageFor(model => model.QuantityPerUnit, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-7">
                            @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control", @id = "id3" } })
                            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.UnitsInStock, htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-7">
                            @Html.EditorFor(model => model.UnitsInStock, new { htmlAttributes = new { @class = "form-control", @id = "id4" } })
                            @Html.ValidationMessageFor(model => model.UnitsInStock, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.UnitsOnOrder, htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-7">
                            @Html.EditorFor(model => model.UnitsOnOrder, new { htmlAttributes = new { @class = "form-control", @id = "id5" } })
                            @Html.ValidationMessageFor(model => model.UnitsOnOrder, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.ReorderLevel, htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.ReorderLevel, new { htmlAttributes = new { @class = "form-control", @id = "id6" } })
                            @Html.ValidationMessageFor(model => model.ReorderLevel, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Discontinued, htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-7">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.Discontinued, new { htmlAttributes = new { @id = "id7" } })
                                @Html.ValidationMessageFor(model => model.Discontinued, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.CategoryID, "CategoryName", htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-7">
                            @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control", @id = "id8" })
                            @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.SupplierID, "CompanyName", htmlAttributes: new { @class = "control-label col-md-2" })
                        </div>
                        <div class="col-md-7">
                            @Html.DropDownList("SupplierID", null, htmlAttributes: new { @class = "form-control", @id = "id9" })
                            @Html.ValidationMessageFor(model => model.SupplierID, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Edit" name="edit" class="btn btn-default" />
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>

    </div>
</div>


<script type="text/javascript">

    $(document).ready(function () {

        //********Code for data Table************
        $('#productTable').DataTable(
            { "scrollX": true }
        );

        //************code for editing product details**********
        $("#productTable").on('click', '.edit-button', function () {
            let id = $(this).attr("id").split(" ");
            let prID = id[1];
            let temp = 0;
            $(this).parent().siblings().each(function () {
                if (temp < 7) {
                    //$("#updateForm").find('input').eq(temp).val($(this).text());
                    $("#id" + temp).val($(this).text());

                    console.log($(this).text());
                }
                else if (temp == 7) {
                    if ($(this).text().trim() == "True") {
                        console.log('trueeeeeeeeeeeeee');
                        $('input:checkbox[id="id7"]').prop("checked", true);
                       
                    }
                    else {
                        console.log('falseeeeeeeeeee');
                        $('input:checkbox[id="id7"]').prop('checked', false);
                    }
                }
                else if (temp > 7) {
                    let itemID = $(this).attr("class");
                    $("#id" + temp).val(itemID);
                }
                temp++;
            })
        })



        //***********Code for deleting product details************
        var prID;
        $("#productTable").on('click', '.delete-button', function () {
            let id = $(this).attr("id").split(" ");
            prID = id[1];
        })

        $('#btnYes').click(function () {
            $.ajax({
                url: "DeleteProducts",
                data: { productID: prID },
                type: "GET",
                success: function (data) {
                    if (data == "Success") {
                        $("#tr-" + prID).hide();
                        $('#deleteModal').modal('hide');
                    }
                }
            });
        })
    });
</script>
@*//**************code or pagination********
     //$("#productTable tbody tr").hide();
     //var RowCount = $("#productTable tbody").children().length;
     //var PageCount = Math.ceil(RowCount / 10);
     //var i;
     //for (i = 1; i <= PageCount; i++) {

     //    var pagesString = " <li id=" + i + "><a href='#'>" + i + "</a></li>" ;
     //    $("#Paging").append(pagesString);
     //}
     //var trcount = 0;
     //$("#productTable tbody").children().each(function () {
     //    trcount++;
     //    var classname = "page" + Math.ceil(trcount / 10);
     //    $(this).addClass(classname);
     //});
     //$(".page1").show();
     //$("#Paging li").click(function () {
     //    var thisid = $(this).attr("id");
     //    var showclass = ".page" + thisid;

     //    $("#productTable tbody tr").hide();
     //    $(showclass).show();
     //});


     //************code for editing product details**********
     //$(".edit-button").click(function () {

     //    let id = $(this).attr("id").split(" ");
     //    let prID = id[1];
     //    let temp = 0;
     //    $(this).parent().siblings().each(function () {
     //        if (temp < 7) {
     //            //$("#updateForm").find('input').eq(temp).val($(this).text());
     //            $("#id" + temp).val($(this).text());

     //            console.log($(this).text());
     //        }
     //        else if (temp >7)
     //        {
     //            let itemID = $(this).attr("class");
     //            $("#id" + temp).val(itemID);
     //        }

     //        //if ($("#id" + temp).is('option')) {
     //        //    console.log("checkbox");
     //        //}
     //        temp++;
     //    })

         //$("#editModal").modal('show');

         //$.ajax({
         //    url: "EditProducts",
         //    data: { productID: prID },
         //    type: "GET",
         //    success: function (data) {
         //        //$(".edit-modal-body").html(data);
         //        $("#editModal").modal('show');
         //    }

         //});

      //***********Code for deleting product details************
     //var prID;
    // $(".delete-button").click(function () {
    //     let id = $(this).attr("id").split(" ");
    //     prID = id[1];
    //     //$("#deleteModal").modal('show');

    //     //alert($id[1]);
    // }
    //)


     // $(".delete-button").click(function () {
     //     let id = $(this).attr("id").split(" ");
     //     let prID = id[1];
     //     $("#deleteModal").modal('show');
     //     $.ajax({
     //         url: "DeleteProducts",
     //         data: { productID: prID },
     //         type: "GET",
     //         success: function (data) {
     //             if (data == "Success") {
     //                 $("#tr-" + prID).hide();
     //             }
     //         }
     //     });
     //     //alert($id[1]);
     // }
     //)*@
